#!/usr/bin/php
<?php

declare(strict_types=1);

const TICKET_STORE_DIR = "/var/tmp/icinga2";
const API_VERSIONS = ["12_0", "11_1", "10_0", "7_0"];

$opts = "H:P:z:u:p:t:w:c:foglvh";
$long = [
    "host:",
    "port:",
    "zone:",
    "user:",
    "password:",
    "token:",
    "warning:",
    "critical:",
    "performance",
    "online",
    "flagged",
    "list",
    "verbose",
    "help",
];

$cli = getopt($opts, $long);

$port = 8443;
$zone = "";
$user = "";
$password = "";
$token = "";
$warning = null;
$critical = null;
$perfdata = false;
$count_online = false;
$count_flagged = false;
$list_zones = false;
$verbose = 0;

foreach ($cli as $k => $v) {
    switch ($k) {
        case "host":
        case "H":
            $host = $v;
            break;
        case "port":
        case "P":
            $port = (int)$v;
            break;
        case "zone":
        case "z":
            $zone = $v;
            break;
        case "user":
        case "u":
            $user = $v;
            break;
        case "password":
        case "p":
            $password = $v;
            break;
        case "token":
        case "t":
            $token = $v;
            break;
        case "warning":
        case "w":
            $warning = $v;
            break;
        case "critical":
        case "c":
            $critical = $v;
            break;
        case "performance":
        case "f":
            $perfdata = true;
            break;
        case "online":
        case "o":
            $count_online = true;
            break;
        case "flagged":
        case "g":
            $count_flagged = true;
            break;
        case "list":
        case "l":
            $list_zones = true;
            break;
        case "verbose":
        case "v":
            if (is_array($v)) {
                $verbose = count($v);
            } else {
                $verbose++;
            }
            break;
        case "help":
        case "h":
            show_help();
            break;
        default:
            show_help(3, "Invalid argument");
            break;
    }
}

if (empty($host)) {
    show_help(3, "Hostname must be specified");
}
if ($list_zones === false) {
    if ($zone === "") {
        show_help(3, "You must specify at least one zone");
    }
    if (!is_array($zone)) {
        $zone = [$zone];
    }
    foreach ($zone as $z) {
        if (!valid_uuid($z)) {
            show_help(3, "Zone must be specified as a valid UUID v4");
        }
    }
}
if (
    (empty($token) && (empty($user) || empty($password)))
    || (!empty($token) && (!empty($user) || !empty($password)))
) {
    show_help(3, "You must specify either a username/password or token");
}
try {
    [$warning, $critical] = parse_wc($warning, $critical);
} catch (Exception $e) {
    show_help(3, $e->getMessage());
}

if (!is_dir(TICKET_STORE_DIR)) {
    if (!mkdir(TICKET_STORE_DIR, 0775, true)) {
        error("Couldn't make ticket store directory " . TICKET_STORE_DIR, 3);
    }
}

try {
    $ticket = login($host, $port, $user, $password, $token, $url_base);
    if ($list_zones) {
        echo "\n";
        if (!empty($url_base)) {
            $out = sprintf("API URL base is %s\n", $url_base);
            echo $out;
            echo str_repeat("-", strlen($out)) . "\n";
        }
        $zones = get_zone_data($url_base, $ticket);
        foreach ($zones as $uuid => $name) {
            echo "$uuid    $name\n";
        }
        exit(0);
    }
    $online = $flagged = $offline = 0;
    foreach ($zone as $z) {
        [$temp1, $temp2, $temp3] = get_ap_data($z, $url_base, $ticket);
        $online += $temp1;
        $flagged += $temp2;
        $offline += $temp3;
    }
} catch (Exception $e) {
    verbose("Exception: " . $e->getMessage());
    echo "UNKNOWN";
    exit(3);
}

if ($count_online && $count_flagged) {
    $count = $online + $flagged;
    $desc = "online/flagged";
} elseif ($count_online) {
    $count = $online;
    $desc = "online";
} elseif ($count_flagged) {
    $count = flagged;
    $desc = "flagged";
} else {
    $count = $offline;
    $desc = "offline";
}

if (!is_null($critical) && compare_threshold($critical, $count)) {
    $result = "CRITICAL";
    $exit = 2;
} elseif (!is_null($warning) && compare_threshold($warning, $count)) {
    $result = "WARNING";
    $exit = 1;
} else {
    $result = "OK";
    $exit = 0;
}
printf("%s: %d %s APs", $result, $count, $desc);
if ($perfdata) {
    printf(" | online=%d flagged=%d offline=%d", $online, $flagged, $offline);
}
echo "\n";
exit($exit);



function login(string $host, int $port, string $user = "", string $password = "", string $token = "", ?string &$base_url = null): string
{
    $hash = sha1("$host$port$user$password");
    $store_file = TICKET_STORE_DIR . "/$hash";
    $data = file_exists($store_file) ? stat($store_file) : false;
    if ($data !== false && time() - $data["mtime"] < 3600) {
        [$ticket, $base_url] = explode("|", file_get_contents($store_file));

        return $ticket;
    }

    if ($token) {
        // future implementation
    } else {
        $data = ["username" => $user, "password" => $password];
    }

    foreach (API_VERSIONS as $version) {
        $url = "https://$host:$port/wsg/api/public/v$version/serviceTicket";
        verbose("Connecting: $url");
        try {
            $stream = prep_json_post($url, $data);
            $response = stream_get_contents($stream);
            verbose("Got response: $response", 2);
            $data = json_decode($response, associative: true, flags: JSON_THROW_ON_ERROR);
            break;
        } catch	(Exception $e) {
            if ($e->getCode() === 401) {
                throw new Exception("Authentication error during login", 401, $e);
            }
        }
    }

    if ($data["serviceTicket"]) {
        $base_url = str_replace("/serviceTicket", "", $url);
        file_put_contents($store_file, $data["serviceTicket"] . "|" . $base_url);

        return $data["serviceTicket"];
    }

    throw new Exception("No service ticket returned from SmartZone");
}

/**
 * Get counts of AP states
 *
 * @return array an array containing counts of online APs, flagged APs, and offline APs
 */
function get_ap_data(string $zone, string $base_url, string $ticket): array
{
    $url = "$base_url/query/ap";
    $query = http_build_query(["serviceTicket" => $ticket]);
    $url .= "?$query";
    $data = [
        "filters" => [["type" => "ZONE", "value" => $zone]],
        "limit" => 1000,
    ];
    verbose("Connecting: $url");
    $stream = prep_json_post($url, $data);
    $json = stream_get_contents($stream);
    // this is big
    verbose("Got response: $json", 5);
    $data = json_decode($json, associative: true, flags: JSON_THROW_ON_ERROR);
    verbose("Got $data[totalCount] records");
    $states = array_column($data["list"], "status");
    $online = array_filter($states, fn($v) => $v === "Online");
    $flagged = array_filter($states, fn($v) => $v === "Flagged");
    $offline = array_filter($states, fn($v) => $v === "Offline");

    return [count($online), count($flagged), count($offline)];
}

/**
 * Get a list of zones on the controller
 *
 * @return array<string, string> an associated array of zone descriptions indexed by UUID
 */
function get_zone_data(string $url_base, string $ticket): array
{
    $url = "$url_base/rkszones";
    $query = http_build_query(["serviceTicket" => $ticket]);
    $url .= "?$query";

    verbose("Connecting: $url");
    $stream = prep_json_get("$url");
    $json = stream_get_contents($stream);
    verbose("Got response: $json");
    $data = json_decode($json, true);
    verbose("Got $data[totalCount] records");
    $uuids = array_column($data["list"], "id");
    $descs = array_column($data["list"], "name");

    return array_combine($uuids, $descs);
}

/**
 * Prepare an HTTP stream with POST data
 *
 * @param string $url The URI
 * @param array $data The POST data
 * @return mixed A stream resource for use with stream_get_contents()
 * @throws Exception
 */
function prep_json_post(string $url, array $data): mixed
{
    $opts = [
        "http" => [
            "method" => "POST",
            "header" => ["Content-Type: application/json", "Connection: close"],
            "content" => json_encode($data),
            "timeout" => 20,
        ],
    ];

    return open_stream($url, $opts);
}

/**
 * Prepare an HTTP stream
 *
 * @param string $url The URI
 * @return mixed A stream resource for use with stream_get_contents()
 * @throws Exception
 */
function prep_json_get(string $url): mixed
{
    $opts = [
        "http" => [
            "header" => ["Content-Type: application/json", "Connection: close"],
        ],
    ];

    return open_stream($url, $opts);
}

/**
 * Prepares a stream for use
 *
 * @param string $url The URI
 * @param array $opts Stream context options
 * @return mixed A stream resource for use with stream_get_contents()
 * @throws Exception
 */
function open_stream(string $url, array $opts = []): mixed
{
    $opts["http"]["timeout"] = getenv("DEFAULT_SOCKET_TIMEOUT") ?: ini_get("default_socket_timeout");
    // $opts["http"]["ignore_errors"] = true;
    $ctx = stream_context_create($opts);
    if (!($stream = @fopen($url, "r", context: $ctx))) {
        $status = (int)(explode(" ", $http_response_header[0] ?? "0 0")[1] ?? 0);
        verbose("HTTP bad response data: " . json_encode($http_response_header ?? null), 3);
        throw new Exception("Couldn't connect to host at $url", $status);
    }

    return $stream;
}

/**
 * Parse the warning and critical values
 *
 * @param string|null $warning The warning value
 * @param string|null $critical The critical value
 * @return array<int, string|null> The warning and critical values
 * @throws Exception In case of invalid format
 */
function parse_wc(?string $warning, ?string $critical): array
{
    if (!is_null($warning)) {
        $warning = parse_threshold($warning);
    }
    if (!is_null($critical)) {
        $critical = parse_threshold($critical);
        if (is_numeric($warning) && is_numeric($critical) && $warning > $critical) {
            verbose("Critical is less than warning, ignoring");
            $critical = null;
        }
    }

    return [$warning, $critical];
}

/**
 * Return a normalized threshold value (floats are converted to ints)
 *
 * @param string|int $thresh The threshold specification
 * @return string The normalized threshold
 * @throws Exception In case of invalid format
 */
function parse_threshold(string $thresh): string
{
    if (preg_match("/^[0-9]+$/", $thresh)) {
        verbose("Threshold $thresh is an integer", 3);

        return $thresh;
    }
    if (preg_match("/^([0-9]+)\.[0-9]+$/", $thresh, $matches)) {
        verbose("Threshold $thresh is a float, returning integer", 3);

        return $matches[1];
    }
    if (preg_match("/^(@?(?:[0-9]+|~))(?:\\.[0-9]+)?(?::(?:([0-9]+)(?:\\.[0-9]+)?)?)?$/", $thresh, $matches)) {
        verbose("Threshold $thresh is a range '$matches[1]' to '$matches[2]'", 3);
        if (count($matches) !== 3) {

            return $matches[1];
        }
        if ($matches[1] === "~" || $matches[1] < $matches[2]) {

            return "$matches[1]:$matches[2]";
        }
    }

    throw new Exception("Invalid threshold format $thresh");
}

/**
 * Checks to see if a value should trigger an alert based on a given threshold
 * The threshold specification looks like [@][start:][end]
 * 'start:end' means to alert if value is *outside* of the range
 * 'start:' means end is infinity, effectively alert if below start
 * 'end' means start is negative infinity, effectively alert if value is above end
 * '~:end' is the same as omitting start
 * a leading '@' means to invert the above definitions
 *
 * @see https://nagios-plugins.org/doc/guidelines.html#THRESHOLDFORMAT
 * @see https://icinga.com/docs/icinga-2/2.11/doc/05-service-monitoring/#threshold-ranges
 * @param string $thresh The threshold specification
 * @param string|int $val The numeric value to compare against
 * @return bool Whether or not an alert should be raised
 */
function compare_threshold(string $thresh, string|int $val): bool
{
    verbose("Evaluating '$thresh' with '$val'", 2);
    $inverse = false;
    $start = null;
    $end = null;
	if (str_starts_with($thresh, "@")) {
        $inverse = true;
        $thresh = trim($thresh, "@");
    }
    if (!str_contains($thresh, ":")) {
        $end = (int)$thresh;
    } else {
        $vals = explode(":", $thresh);
        $start = $vals[0] === "~" ? -INF : (int)$vals[0];
        $end = $vals[1] === "" ? INF : (int)$vals[1];
    }

    return $inverse
        ? $val <= $end && (is_null($start) || $val >= $start)
        : $val > $end || (!is_null($start) && $val < $start);
}

function valid_uuid(string $uuid): bool
{
    return preg_match("/^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}$/", $uuid) > 0;
}

function error(string $message, int $exit_code): void
{
    file_put_contents("php://stderr", "$message\n\n");
    exit($exit_code);
}

function verbose(string $message, int $level = 1): void
{
    global $verbose;
    if ($verbose >= $level) {
        file_put_contents("php://stderr", "$message\n");
    }
}

function show_help(int $exit_code = 0, string $message = ""): void
{
    if ($message !== "") {
        $message .= "\n\n";
    }
    $message .= <<< 'EOF'
      Usage:
      -H, --host=HOST       The hostname to connect to
      -P, --port=PORT       The port to use (defaults to 8443)
      -z, --zone=ZONE       Which zone UUID to check; may be specified more than
                            once, in which case values will be summed
      -u, --user=USER       The login username
      -p, --password=PASS   The login password
      -t, --token=TOKEN     The login token (instead of username/password)
      -w, --warning=VALS    The warning value or range
      -c, --critical=VALS   The critical value or range
      -o, --online          Calculate warning and critical values relative to online
                            AP count instead of offline; can be combined with -g
      -g, --flagged         Calculate warning and critical values relative to flagged
                            AP count instead of offline; can be combined with -o
      -f, --performance     Output performance data
      -l, --list            Just get a list of zones
      -v, --verbose         Increase verbosity
      -h, --help            Show this usage info


    EOF;

    file_put_contents("php://stderr", $message);
    exit($exit_code);
}

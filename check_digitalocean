#!/bin/bash

# check_digitalocean Nagios plugin to check health of Digital Ocean droplets
# Copyright (C) 2016 Michael Newton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

name=$(basename "$0")
configfile="$HOME/.doctlcfg"
cmd="doctl"

usage="
Usage:
    $name [-t token] [-w <warning>] [-c <critical>] [-f]
    $name -h

    -t token            DigitalOcean API token, will use $configfile if not supplied
    -w warn, -c crit    Thresholds for inactive droplets and droplet count;
                            specify count or percent for either (e.g. 5,80%);
                            count as percentage will be taken against account limit
    -f                  Output performance data
    -d                  Debug to STDERR (pass twice for more output)
    -h                  Help (print command usage and quit)
"

# set some defaults
warning=1,80%
critical=1,90%
debug=0
while getopts "t:w:c:fdh" option; do
	case "$option" in
		t) token="$OPTARG";;
		w) warning="$OPTARG";;
		c) critical="$OPTARG";;
		f) generate_perf_data=1;;
		d) (( debug++ ));;
		h) echo "$usage" && exit 3;;
	esac
done

if [[ -z "$token" ]] && [[ ! -e $configfile ]]; then
	echo "UNKNOWN - No token specified, and could not find $configfile"
	exit 3
fi

PATH="$HOME/bin:/usr/local/bin:/usr/local/sbin:$PATH"
cmd=$(which "$cmd" &2> /dev/null)
if [[ -z $cmd ]]; then
	echo "UNKNOWN - Could not find doctl in $PATH"
	exit 3
else
	cmd=("$cmd")
fi

if [[ ! -z $token ]]; then
	cmd+=("-t" "$token")
fi

# The full list
droplets=$("${cmd[@]}" compute droplet list)
ret1=$?
[[ $debug -gt 1 ]] && echo "Output of ${cmd[*]} compute droplet list:" >&2
[[ $debug -gt 1 ]] && echo "$droplets" >&2

# Account details
account=$("${cmd[@]}" account get)
ret2=$?
[[ $debug -gt 1 ]] && echo "Output of ${cmd[*]} account get:" >&2
[[ $debug -gt 1 ]] && echo "$account" >&2

if [[ $ret1 -ne 0 ]] || [[ $ret2 -ne 0 ]]; then
	echo "UNKNOWN - Error running doctl"
	exit 3
fi

# Droplet count: offline/total=percentage
countdata=$(echo "$droplets" | awk 'BEGIN{a=0}NR>1&&/off$/{a+=1}END{printf "%d/%d=%d", a, NR - 1, (a/(NR-1))*100}')
offcount=${countdata%/*}
offwarn=${warning%,*}
offcrit=${critical%,*}

totalcount=${countdata%=*}
totalcount=${totalcount#*/}
offpercent=${countdata#*=}
totalwarn=${warning##*,}
totalcrit=${critical##*,}

# Account info: status;limit:percent
accountinfo=$(echo "$account" | awk -v "tot=$totalcount" 'NR>1{pct=(tot/$3)*100; printf("%s;%d:%d",$6,$3,pct)}')
acctstat=${accountinfo%;*}
acctlimit=${accountinfo##*;}
acctlimit=${acctlimit%:*}
acctpercent=${accountinfo##*:}

[[ $debug -gt 0 ]] && printf "Account status: %s; droplet limit %d\n" "$acctstat" "$acctlimit"
[[ $debug -gt 0 ]] && printf "Off droplets: %d (%d%%); warning %s, critical %s\n" "$offcount" "$offpercent" "$offwarn" "$offcrit"
[[ $debug -gt 0 ]] && printf "Total droplets: %d (%d%%); warning %s, critical %s\n" "$totalcount" "$acctpercent" "$totalwarn" "$totalcrit"

exitcode=0

if [[ $offwarn == *% && $offpercent -ge ${offwarn%\%} ||  $totalwarn == *% && $acctpercent -ge ${totalwarn%\%} ]]; then
	[[ $debug -gt 0 ]] && echo "Exceeded warning percentage!" >&2
	exitcode=2
elif [[ $offwarn != *% && $offcount -ge $offwarn || $totalwarn != *% && $totalcount -ge $totalwarn ]]; then
	[[ $debug -gt 0 ]] && echo "Exceeded warning value!" >&2
	exitcode=2
elif [[ $acctstat != "active" ]] && [[ $acctstat != "locked" ]]; then
	[[ $debug -gt 0 ]] && echo "Account status warning!" >&2
	exitcode=2
fi

if [[ $offcrit == *% && $offpercent -ge ${offcrit%\%} || $totalcrit == *% && $acctpercent -ge ${totalcrit%\%} ]]; then
	[[ $debug -gt 0 ]] && echo "Exceeded critical percentage!" >&2
	exitcode=1
elif [[ $offcrit != *% && $offcount -ge $offcrit || $totalcrit != *% && $totalcount -ge $totalcrit ]]; then
	[[ $debug -gt 0 ]] && echo "Exceeded critical value!" >&2
	exitcode=1
elif [[ $acctstat == "locked" ]]; then
	[[ $debug -gt 0 ]] && echo "Account status locked!" >&2
	exitcode=1
fi

case $exitcode in
0)
	result="OK"
	;;
1)
	result="CRITICAL"
	;;
2)
	result="WARNING"
	;;
3)
	result="UNKNOWN"
	;;
esac

printf "%s - %d droplets in off state - %d droplets total out of %d allowed - account status %s" "$result" "$offcount" "$totalcount" "$acctlimit" "$acctstat"
if [[ $generate_perf_data -gt 0 ]]; then
	printf " | offline_droplets=%d total_droplets=%d" "$offcount" "$totalcount"
fi
echo

exit $exitcode

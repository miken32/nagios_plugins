#!/bin/bash

# check_apc_pdu Nagios plugin to check health of APC PDU (tested on AP7900)
# Copyright (C) 2024 Michael Newton
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

name=$(basename "$0")
usage="
Usage:
    $name -M <mode> -H <hostname> [-2] [-p <port>] [-C <community>] [-T transport] [-w <warning>] [-c <critical>]
        [-t <timeout>] [-r <retry>] [-f] [-v]
    $name -M <mode> -H <hostname> -l <secName> [-T transport] [-L <protocolList>] [-x <authPassword>]
        [-X <privPassword>] [-w <warning>] [-c <critical>] [-t <timeout>] [-r <retry>] [-f] [-v]
    $name -h

    -M mode             Polling mode (currently defaults to only supported value 'load')
    -H hostname         Hostname
    -p port             SNMP port
    -C community        SNMP version 1/2c community
    -2                  Use SNMP version 2c (instead of 1)
    -T transport        SNMP transport (udp, tcp, udp6, tcp6; default udp)
    -l secName          SNMP v3 username
    -L protocolList     SNMP v3 authentication, privacy protocols (default sha,aes)
    -x authPassword     SNMP v3 authentication password
    -X privPassword     SNMP v3 privacy password
    -w warning          Warning threshold for CPU (%) checks
    -c critical         Critical threshold for CPU (%) checks
    -t timeout          Timeout in seconds
    -r retry            Retry count
    -f                  Output performance data
    -v                  Be verbose on stderr
    -h                  Help (print command usage and quit)
"

# set some defaults
mode="load" # may add more later?
version="1"
community=
port="161"
protocols="sha,aes"
transport="udp"
snmp_opts=("-Oeqvu")
message=""
ext_message=""
exit="0"
generate_perf_data="0"
perf_data=""
timeout=5
retry=3
debug=0
snmpget="/usr/bin/snmpget"
snmpwalk="/usr/bin/snmpwalk"
warn_oid=".1.3.6.1.4.1.318.1.1.12.2.2.1.1.3.1"
crit_oid=".1.3.6.1.4.1.318.1.1.12.2.2.1.1.4.1"

while getopts "M:H:p:C:2T:l:L:x:X:w:c:t:r:fvh" option; do
	case $option in
		M) mode=$OPTARG;;
		H) hostname=$OPTARG;;
		p) port=$OPTARG;;
		C) community=$OPTARG;;
		2) version=2c;;
		T) transport=$OPTARG;;
		l) secName=$OPTARG;;
		L) protocols=$OPTARG;;
		x) authPassword=$OPTARG;;
		X) privPassword=$OPTARG;;
		w) warning=$OPTARG;;
		c) critical=$OPTARG;;
		t) timeout=$OPTARG;;
		r) retry=$OPTARG;;
		f) generate_perf_data=1;;
		v) (( debug++ ));;
		h) echo "$usage" && exit;;
		*) echo "$usage" && exit 3;;
	esac
done

if [[ -z "$hostname" ]] || [[ -z "$mode" ]]; then
	echo "Unknown: Missing hostname or mode parameter"
	echo "$usage"
	exit 3
fi

if [[ "$version" = "1" ]] && [[ -z "$community" ]]; then
	# haven't specified v2c and no community, assume they want v3
	if [[ -z "$secName" ]]; then
		echo "Unknown: Missing SNMP v3 security name or v1 community name"
		echo "$usage"
		exit 3
	fi
	version=3
	snmp_opts+=("-v" "$version" "-u" "$secName")
	if [[ -z "$authPassword" ]]; then
		secLevel="NoAuthNoPriv"
	else
		authProtocol=${protocols%,*}
		privProtocol=${protocols#*,}
		if [[ -z "$privPassword" ]]; then
			secLevel="AuthNoPriv"
		else
			secLevel="AuthPriv"
			snmp_opts+=("-x" "$privProtocol" "-X" "$privPassword")
		fi
		snmp_opts+=("-l" "$secLevel" "-a" "$authProtocol" "-A" "$authPassword")
	fi
else
	if [[ -z "$community" ]]; then
		echo "Unknown: Missing community parameter"
		echo "$usage"
		exit 3
	fi
	snmp_opts+=("-v" "$version" "-c" "$community")
fi
snmp_opts+=("-t" "$timeout" "-r" "$retry" "$transport:$hostname:$port")


if [[ ! $warning =~ ^[0-9]+$ ]] || [[ ! $critical =~ ^[0-9]+$ ]]; then
	[[ $debug -gt 0 ]] && printf "No warning or critical threshold specified, fetching from device\n"
	[[ $debug -gt 0 ]] && printf "Running command: %s %s %s %s\n" "$snmpget" "${snmp_opts[*]}" "$warn_oid" "$crit_oid"
	read -d "\n" warning critical <<< $("$snmpget" "${snmp_opts[@]}" "$warn_oid" "$crit_oid" 2> /dev/null)
	stat=$?
	[[ $debug -gt 0 ]] && printf "Returned %d\n" $stat
	[[ $debug -gt 0 ]] && printf "Retrieved warning and critical thresholds %d and %d via SNMP\n" "$warning" "$critical"
fi

if [[ $warning -lt 1 ]] || [[ $critical -lt 1 ]]; then
	printf "Invalid warning (%d) or critical (%d) thresholds supplied or retrieved!\n" "$warning" "$critical"
	echo "$usage"
	exit 3
fi

# can't do bash math in case we get a float
read -d "\n" warn10 crit10 <<< $(echo "$warning * 10;$critical * 10" | bc)

check_oid=".1.3.6.1.4.1.318.1.1.12.2.3.1.1.2.1"
check_name="Load"
check_unit="A"
[[ $debug -gt 0 ]] && printf "Running command: %s %s %s\n" "$snmpget" "${snmp_opts[*]}" "$check_oid"
metric=$("$snmpget" "${snmp_opts[@]}" "$check_oid" 2> /dev/null)
stat=$?
[[ $debug -gt 0 ]] && printf "Returned %d\n" $stat
if [[ "$metric" =~ [^0-9] ]] || [[ -z "$metric" ]] || [[ $stat != 0 ]]; then
    status="Unknown"
	exit=3
elif [[ $metric -ge $crit10 ]]; then
    status="Critical"
	exit=2
elif [[ $metric -ge $warn10 ]]; then
    status="Warning"
	exit=1
else
    status="OK"
	exit=0
fi

if [[ $status == "Unknown" ]]; then
	printf "%s: %s %s" "$status" "$check_name" "$metric"
else
    metric=$(echo "scale=1; $metric / 10" | bc)
	if [[ $generate_perf_data = 1 ]]; then 
		printf "%s: %s %0.1f%s|%s=%0.1f;%0.1f;%0.1f\n" "$status" "$check_name" "$metric" "$check_unit" "${check_name/ /_}" "$metric" "$warning" "$critical"
	else
		printf "%s: %s %0.1f%s\n" "$status" "$check_name" "$metric" "$check_unit"
	fi
fi

exit $exit
